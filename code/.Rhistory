lines(g, rec$p, lwd = 2, col = "green")
# run simulations
dom <- selection_sim(p = 0.01, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.01, rel_fit = c(1, 0.6, 0.2), n_gen)
dom <- selection_sim(p = 0.1, rel_fit = c(1, 1, 0.2), n_gen)
add <- selection_sim(p = 0.1, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.1, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.4, rel_fit = c(1, 1, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(1, 1, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
# set generations
n_gen <- 50
# run simulations
dom <- selection_sim(p = 0.01, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.01, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.01, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.1, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.1, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.1, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(1, 1, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(1, 0.9, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(0.8, 1, 0.8), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.5, rel_fit = c(0.8, 1, 0.5), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.01, rel_fit = c(0.8, 1, 0.5), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
dom <- selection_sim(p = 0.01, rel_fit = c(0.2, 1, 0.2), n_gen)
add <- selection_sim(p = 0.5, rel_fit = c(1, 0.6, 0.2), n_gen)
rec <- selection_sim(p = 0.5, rel_fit = c(1, 0.2, 0.2), n_gen)
#Plotting results
g <- seq(1, n_gen, 1)
# intialise plot
plot(NULL, xlim = c(0, n_gen), ylim = c(0, 1),
xlab = "Time (generations)", ylab = "Frequency - p", las = 1)
# add curves for each case
lines(g, dom$p, lwd = 2, col = "blue")
lines(g, add$p, lwd = 2, col = "red")
lines(g, rec$p, lwd = 2, col = "green")
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
lhrt<- function(h1, h0) {
return(2*h1-h0)
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
#long
lhrt(-38360.292730, -38754.477870)
#REV
#short
lhrt(-192.634719, 207.497102)
#long
lhrt(-37369.225921, -38754.477870)
lhrt<- function(h1, h0) {
lhrt<- function(h1, h0) {
return(2*ln(h1)-ln(h0))
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
lhrt<- function(h1, h0) {
return(2*ln(h1)-ln(h0))
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
#long
lhrt(-38360.292730, -38754.477870)
#REV
#short
lhrt(-192.634719, 207.497102)
#long
lhrt(-37369.225921, -38754.477870)
pchisq(chi, df = 2)
}
lhrt <- function(h1, h0) {
return(2*ln(h1)-ln(h0))
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
lhrt <- function(h1, h0) {
return(2*log(h1)-log(h0))
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
lhrt<- function(h1, h0) {
return(2*h1-h0)
}
#Kimura-2-parameter
#short
lhrt(-204.494923, 207.497102)
#long
lhrt(-38360.292730, -38754.477870)
#REV
#short
lhrt(-192.634719, 207.497102)
#long
lhrt(-37369.225921, -38754.477870)
#Kimura-2-parameter and JC69
#short
kjs = lhrt(-204.494923, 207.497102)
pchisq(q = kjs, df = 1, lower.tail = FALSE)
#long
kjl = lhrt(-38360.292730, -38754.477870)
pchisq(q = <kjl, df = 1, lower.tail = FALSE)
#long
kjl = lhrt(-38360.292730, -38754.477870)
pchisq(q = kjl, df = 1, lower.tail = FALSE)
#REV and Kimura-2-parameter
#short
rks = lhrt(-192.634719, -204.494923)
pchisq(q = rks, df = 10, lower.tail = FALSE)
#long
rkl = lhrt(-37369.225921, -38360.292730)
pchisq(q = rkl, df = 10, lower.tail = FALSE)
lhrt<- function(h1, h0) {
return(2*(h1-h0))
}
#Kimura-2-parameter and JC69
#short
kjs = lhrt(-204.494923, 207.497102)
pchisq(q = kjs, df = 1, lower.tail = FALSE)
#long
kjl = lhrt(-38360.292730, -38754.477870)
pchisq(q = kjl, df = 1, lower.tail = FALSE)
#REV and Kimura-2-parameter
#short
rks = lhrt(-192.634719, -204.494923)
pchisq(q = rks, df = 10, lower.tail = FALSE)
#long
rkl = lhrt(-37369.225921, -38360.292730)
pchisq(q = rkl, df = 10, lower.tail = FALSE)
#Kimura-2-parameter and JC69
#short
kjs = lhrt(-204.494923, 207.497102)
pchisq(q = kjs, df = 1, lower.tail = FALSE)
#Kimura-2-parameter and JC69
#short
kjs = lhrt(-204.494923, -207.497102)
pchisq(q = kjs, df = 1, lower.tail = FALSE)
#long
kjl = lhrt(-38360.292730, -38754.477870)
pchisq(q = kjl, df = 1, lower.tail = FALSE)
#REV and Kimura-2-parameter
#short
rks = lhrt(-192.634719, -204.494923)
pchisq(q = rks, df = 10, lower.tail = FALSE)
#long
rkl = lhrt(-37369.225921, -38360.292730)
pchisq(q = rkl, df = 10, lower.tail = FALSE)
install.packages("PopGenome")
install.packages("tidyverse")
rl1 = (-1825.328988-(-1835.758416)*2
rl1 = (-1825.328988-(-1835.758416)*2
rl1 <- (-1825.328988-(-1835.758416)*2
;
rl1 <- (-1825.328988-(-1835.758416)*2;
rl1 <- (-1825.328988-(-1835.758416))*2;
pchisq(q = rl1, df = 5, lower.tail = FALSE)
rl2 <- (-1833.673531-(-1833.673530))*2
pchisq(q = rl2, df = 5, lower.tail = FALSE)
rl1
rl2
rl1 <- (-1783.712653-(-1834.663596))*2;
pchisq(q = rl1, df = 1, lower.tail = FALSE)
rl2 <- (-1772.975435-(-1783.712653))*2
pchisq(q = rl2, df = 7, lower.tail = FALSE)
rl3 <- (-1781.229462-(-1781.229462))*2
pchisq(q = rl3, df = 7, lower.tail = FALSE)
rl1
rl2
rl3
rl3 <- (-1781.229462-(-1781.229462))*2
pchisq(q = rl3, df = 3, lower.tail = FALSE)
pchisq(q = rl3, df = 1000, lower.tail = FALSE)
pchisq(q = rl3, df = 1, lower.tail = FALSE)
pchisq(q = rl3, df = 0, lower.tail = FALSE)
pchisq(q = rl3, df = 18, lower.tail = FALSE)
pchisq(q = rl3, df = 7, lower.tail = FALSE)
library("DESeq2")
#### Create Tables ####
#Read n the data
# Musang King Aril
SRR6040094 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040094_count.txt")
setwd("~/Desktop/Genomanalys/erik_burger_genome_analysis/code")
#### Create Tables ####
#Read n the data
# Musang King Aril
SRR6040094 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040094_count.txt")
SRR6040095 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040095_count.txt")
SRR6040097 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040097_count.txt")
# Monthong
SRR6156066 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156066_count.txt")
SRR6156067 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156067_count.txt")
SRR6156069 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156069_count.txt")
#Create the combined tabel of the data
# Musang King Aril
full_table <- SRR6040094[2]
names(full_table)[1] <- "SRR6040094"
full_table$SRR6040095 <- SRR6040095[,2]
full_table$SRR6040097 <- SRR6040097[,2]
# Musang King Aril
full_table$SRR6156066 <- SRR6156066[,2]
full_table$SRR6156067 <- SRR6156067[,2]
full_table$SRR6156069 <- SRR6156069[,2]
rownames(full_table) <-SRR6040094[,1]
# Remove last rows that contained non gene information
full_table<-full_table[1:(nrow(full_table)-5),]
# Create metadata table
run_ID =c('SRR6040094', 'SRR6040095', 'SRR6040097', 'SRR6156066', 'SRR6156067', 'SRR6156069')
Sample_ID = c('SRS2515723', 'SRS2515723', 'SRS2515723', 'SRS2580069', 'SRS2580069', 'SRS2580069')
colData = data.frame(run_ID, Sample_ID)
#creating the count table with the sample ID as a differetiator
ddsFullCountTable <- DESeqDataSetFromMatrix(
countData = full_table,
colData = colData,
design = ~Sample_ID)
ddsFullCountTable
# Collapse the replicates (this was not used since Deseq2 can not unse 1 to 1 inputs)
ddsCollapsed <- collapseReplicates( ddsFullCountTable,
groupby = ddsFullCountTable$Sample_ID,
)
# Calcualte the change.
ddsFullCountTable <- DESeq(ddsFullCountTable)
# Obtain the results
res <- results(ddsFullCountTable)
mcols(res, use.names=TRUE)
# Plot the MA plot
plotMA( res, ylim = c(-10, 10) )
#Plot a histogram of the obtained p-values
hist( res$pvalue, breaks=20, col="grey" )
#Rlog transforms the data
rld <- rlog( ddsFullCountTable)
head( assay(rld) )
#scatterplot comparison between run SRR6040094 and SRR6040095
par( mfrow = c( 1, 2) )
plot( log2( 1+counts(ddsFullCountTable, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
#PCA comparing the two samples
ramp <- 1:3/3
cols <- c(rgb(ramp, 0, 0),
rgb(0, ramp, 0),
rgb(0, 0, ramp),
rgb(ramp, 0, ramp))
print( plotPCA( rld, intgroup = c( "Sample_ID")) )
library("DESeq2")
# Musang King Aril
SRR6040094 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040094_count.txt")
SRR6040095 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040095_count.txt")
SRR6040097 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040097_count.txt")
#stem
#SRR6040096 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040096_count.txt")
# Root
#SRR6040093 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040093_count.txt")
# Leaf
SRR6040092 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040092_count.txt")
full_table <- SRR6040094[2]
names(full_table)[1] <- "SRR6040094"
full_table$SRR6040095 <- SRR6040095[,2]
full_table$SRR6040097 <- SRR6040097[,2]
#full_table$SRR6040096 <- SRR6040096[,2]
#full_table$SRR6040093 <- SRR6040093[,2]
full_table$SRR6040092 <- SRR6040092[,2]
rownames(full_table) <-SRR6040094[,1]
# Remove last rows that contained non gene information
full_table<-full_table[1:(nrow(full_table)-5),]
# Create metadata table
run_ID =c('SRR6040094', 'SRR6040095', 'SRR6040097', 'SRR6040092')
Sample_ID = c('SRS2515723', 'SRS2515723', 'SRS2515723', 'SRS2515726')
colData = data.frame(run_ID, Sample_ID)
ddsFullCountTable <- DESeqDataSetFromMatrix(
countData = full_table,
colData = colData,
design = ~Sample_ID)
ddsFullCountTable
# Calcualte the change.
ddsFullCountTable <- DESeq(ddsFullCountTable)
# Obtain the results
res <- results(ddsFullCountTable)
mcols(res, use.names=TRUE)
# Plot the MA plot
plotMA( res, ylim = c(-20, 20) )
plotDispEsts( ddsFullCountTable, ylim = c(1e-6, 1e1) )
#Plot a histogram of the obtained p-values
hist( res$pvalue, breaks=20, col="grey" )
#Rlog transforms the data
rld <- rlog( ddsFullCountTable)
head( assay(rld) )
#scatterplot comparison between run SRR6040094 and SRR6040095
par( mfrow = c( 1, 2) )
plot( log2( 1+counts(ddsFullCountTable, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
#PCA comparing the two samples
ramp <- 1:3/3
cols <- c(rgb(ramp, 0, 0),
rgb(0, ramp, 0),
rgb(0, 0, ramp),
rgb(ramp, 0, ramp))
print( plotPCA( rld, intgroup = c( "Sample_ID")) )
dems <- res[complete.cases(res$baseMean), ]
dems <- dems[complete.cases(dems$pvalue), ]
dems <- dems[dems$pvalue < 0.5,]
dems
View(dems)
dems
table <- dems
table
dems[1]
table <- table[1:6]
table
table[1:6]
table <- table[2]
table
setDT(table, keep.rownames = TRUE)[]
library(data.table)
setDT(table, keep.rownames = TRUE)[]
setDT(table[2], keep.rownames = TRUE)[]
write.table(res, file='test_result_print.txt',sep='\t',quote=FALSE)
write.table(dems, file='test_result_print.tsv',sep='\t',quote=FALSE)
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/analyses/12_DESeq')
write.table(dems, file='aril_vs_leaf.tsv',sep='\t',quote=FALSE)
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/code')
# Only results with a pvalue under 0.5
dems <- res[complete.cases(res$baseMean), ]
dems <- dems[complete.cases(dems$pvalue), ]
dems <- dems[dems$pvalue < 0.05,]
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/analyses/12_DESeq')
write.table(dems, file='aril_vs_leaf.tsv',sep='\t',quote=FALSE)
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/code')
library("DESeq2")
#### Create Tables ####
#Read n the data
# Musang King Aril
SRR6040094 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040094_count.txt")
SRR6040095 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040095_count.txt")
SRR6040097 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6040097_count.txt")
# Monthong
SRR6156066 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156066_count.txt")
SRR6156067 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156067_count.txt")
SRR6156069 = read.table(file="../analyses/11_Htseq_expr_analysis/SRR6156069_count.txt")
#Create the combined tabel of the data
# Musang King Aril
full_table <- SRR6040094[2]
names(full_table)[1] <- "SRR6040094"
full_table$SRR6040095 <- SRR6040095[,2]
full_table$SRR6040097 <- SRR6040097[,2]
# Musang King Aril
full_table$SRR6156066 <- SRR6156066[,2]
full_table$SRR6156067 <- SRR6156067[,2]
full_table$SRR6156069 <- SRR6156069[,2]
rownames(full_table) <-SRR6040094[,1]
# Remove last rows that contained non gene information
full_table<-full_table[1:(nrow(full_table)-5),]
# Create metadata table
run_ID =c('SRR6040094', 'SRR6040095', 'SRR6040097', 'SRR6156066', 'SRR6156067', 'SRR6156069')
Sample_ID = c('SRS2515723', 'SRS2515723', 'SRS2515723', 'SRS2580069', 'SRS2580069', 'SRS2580069')
colData = data.frame(run_ID, Sample_ID)
#creating the count table with the sample ID as a differetiator
ddsFullCountTable <- DESeqDataSetFromMatrix(
countData = full_table,
colData = colData,
design = ~Sample_ID)
ddsFullCountTable
# Collapse the replicates (this was not used since Deseq2 can not unse 1 to 1 inputs)
ddsCollapsed <- collapseReplicates( ddsFullCountTable,
groupby = ddsFullCountTable$Sample_ID,
)
# Calcualte the change.
ddsFullCountTable <- DESeq(ddsFullCountTable)
# Obtain the results
res <- results(ddsFullCountTable)
mcols(res, use.names=TRUE)
# Plot the MA plot
plotMA( res, ylim = c(-10, 10) )
#Plot a histogram of the obtained p-values
hist( res$pvalue, breaks=20, col="grey" )
#Rlog transforms the data
rld <- rlog( ddsFullCountTable)
head( assay(rld) )
#scatterplot comparison between run SRR6040094 and SRR6040095
par( mfrow = c( 1, 2) )
plot( log2( 1+counts(ddsFullCountTable, normalized=TRUE)[, 1:2] ), col="#00000020", pch=20, cex=0.3 )
plot( assay(rld)[, 1:2], col="#00000020", pch=20, cex=0.3 )
#PCA comparing the two samples
ramp <- 1:3/3
cols <- c(rgb(ramp, 0, 0),
rgb(0, ramp, 0),
rgb(0, 0, ramp),
rgb(ramp, 0, ramp))
print( plotPCA( rld, intgroup = c( "Sample_ID")) )
dems <- res[complete.cases(res$baseMean), ]
dems <- dems[complete.cases(dems$pvalue), ]
dems <- dems[dems$pvalue < 0.05,]
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/analyses/12_DESeq')
write.table(dems, file='aril_vs_aril.tsv',sep='\t',quote=FALSE)
setwd('/Users/ErikBurger/Desktop/Genomanalys/erik_burger_genome_analysis/code')
